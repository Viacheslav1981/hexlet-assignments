
// В этом упражнении для хранения иерархических структур
// мы используем подход, который называется Материализованный путь

// Плюс: легко получить часть дерева или все дерево целиком
// Минус: Сложно менять структуру дерева. Если изменится один узел, нужно будет менять все узлы,
// которые от него зависят

// Еще один пример иерархической структуры - комментарий.
// На многих форумах можно оставлять комментарий на комментарий

// Модель

public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Lob
    private String content;

    // Текстовое поле, в котором будет хранится путь
    private String path;

    // Геттеры и сеттеры
}

// Путь представляет собой строку, в которой через точку перечислены все предки
// 10 | Comment content | 1.3.5.7
// Коментарий с id 10  — это потомок комментария 7,
// тот в свою очередь — это потомок комментария 5
// и так далее

// Значение path у корневого комментария равно null

// 1
// |_3
//    |_5
//      |_ 7
//         |_10


// Из этого пути легко можно получить предка для текущего комментария
// или все дерево целиком
